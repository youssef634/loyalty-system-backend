
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  enName: 'enName',
  arName: 'arName',
  phone: 'phone',
  email: 'email',
  password: 'password',
  profileImage: 'profileImage',
  role: 'role',
  points: 'points',
  qrCode: 'qrCode',
  createdAt: 'createdAt'
};

exports.Prisma.RolePermissionScalarFieldEnum = {
  id: 'id',
  role: 'role',
  page: 'page'
};

exports.Prisma.ResetPasswordTokenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  randomCode: 'randomCode',
  token: 'token',
  expiresAt: 'expiresAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  enName: 'enName',
  arName: 'arName',
  type: 'type',
  createdAt: 'createdAt'
};

exports.Prisma.CafeProductScalarFieldEnum = {
  id: 'id',
  enName: 'enName',
  arName: 'arName',
  image: 'image',
  price: 'price',
  points: 'points',
  type: 'type',
  categoryId: 'categoryId'
};

exports.Prisma.RestaurantProductScalarFieldEnum = {
  id: 'id',
  enName: 'enName',
  arName: 'arName',
  image: 'image',
  price: 'price',
  points: 'points',
  type: 'type',
  categoryId: 'categoryId'
};

exports.Prisma.RewardScalarFieldEnum = {
  id: 'id',
  name: 'name',
  costPoints: 'costPoints',
  description: 'description'
};

exports.Prisma.MyRewardScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  cafeProductId: 'cafeProductId',
  restaurantProductId: 'restaurantProductId',
  points: 'points',
  type: 'type',
  status: 'status',
  date: 'date',
  note: 'note'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  type: 'type',
  currency: 'currency',
  points: 'points',
  date: 'date',
  userId: 'userId',
  cafeProductId: 'cafeProductId',
  restaurantProductId: 'restaurantProductId',
  invoiceId: 'invoiceId',
  status: 'status',
  synced: 'synced'
};

exports.Prisma.SettingsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  enTitle: 'enTitle',
  arTitle: 'arTitle',
  enDescription: 'enDescription',
  arDescription: 'arDescription',
  imgUrl: 'imgUrl',
  timezone: 'timezone',
  enCurrency: 'enCurrency',
  arCurrency: 'arCurrency',
  usdToIqd: 'usdToIqd',
  pointsPerDollar: 'pointsPerDollar',
  pointsPerIQD: 'pointsPerIQD',
  printerType: 'printerType',
  printerIp: 'printerIp',
  port: 'port',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  phone: 'phone',
  email: 'email',
  totalPrice: 'totalPrice',
  discount: 'discount',
  points: 'points',
  currency: 'currency',
  createdAt: 'createdAt',
  synced: 'synced'
};

exports.Prisma.InvoiceItemScalarFieldEnum = {
  id: 'id',
  invoiceId: 'invoiceId',
  cafeProductId: 'cafeProductId',
  restaurantProductId: 'restaurantProductId',
  categoryId: 'categoryId',
  quantity: 'quantity',
  price: 'price',
  total: 'total'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  ACCOUNTANT: 'ACCOUNTANT',
  CASHIER: 'CASHIER',
  USER: 'USER'
};

exports.CategoryType = exports.$Enums.CategoryType = {
  CAFE: 'CAFE',
  RESTAURANT: 'RESTAURANT'
};

exports.RewardStatus = exports.$Enums.RewardStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.PrinterType = exports.$Enums.PrinterType = {
  USB: 'USB',
  LAN: 'LAN'
};

exports.Prisma.ModelName = {
  User: 'User',
  RolePermission: 'RolePermission',
  ResetPasswordToken: 'ResetPasswordToken',
  Category: 'Category',
  CafeProduct: 'CafeProduct',
  RestaurantProduct: 'RestaurantProduct',
  Reward: 'Reward',
  MyReward: 'MyReward',
  Transaction: 'Transaction',
  Settings: 'Settings',
  Invoice: 'Invoice',
  InvoiceItem: 'InvoiceItem'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
